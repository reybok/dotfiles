""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable features not Vi compatible
set nocompatible

" Initialize pathogen
execute pathogen#infect()
execute pathogen#helptags()

filetype plugin on
filetype indent on

" Use powerline for vim
" TODO!
" set rtp+=/usr/lib/python3.5/site-packages/powerline/bindings/vim

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Show current position
set ruler

" Show line numbers
set number

" Show matching brackets when text indicator is over them
set showmatch

" Hide the default mode text (e.g. -- INSERT -- below the statusline)
"set noshowmode 

" Show the status line
set laststatus=2

" Always display the tabline, even if there is only one tab
set showtabline=2 

" Disable vim instant markdown preview from autostarting
let g:instant_markdown_autostart = 0

" Disable folding in vim markdown plugin
let g:vim_markdown_folding_disabled=1

" Init pencil mode
let g:pencil#wrapModeDefault = 'soft'

" Grammatical correction
" TODO!
" let g:languagetool_jar='~/.vim/bundle/LanguageTool/software/LanguageTool-3.4/languagetool-commandline.jar'

" Redrew only when we need to
set lazyredraw

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on
set background=dark
"colorscheme vimbrant
highlight ColorColumn ctermbg=7
highlight ColorColumn guibg=Gray
highlight Visual guibg=Gray

" Enable 256 colors in Vim
set t_Co=256

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab
set smarttab

" File type specific options overwrite these parameters (see .vim/after/ftplugin)
" 1 tab = 3 spaces
set shiftwidth=3
set softtabstop=3

set autoindent
set smartindent
set shiftround

" Smart backspace
set backspace=indent,eol,start

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Search 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Highlight search results
set hlsearch

set ignorecase

" First search for the current directory containing the current
" file, then the current directory, then each directory under
" the current directory
set path=.,,**

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off
set nobackup
set nowb
set noswapfile

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"

" Fast saving
nmap <leader>w :w<cr>

" Fast quitting
nmap <leader>q :q<cr>

" Remap VIM 0 to first non-blank character
map 0 ^

" Ctrl-N stops hlsearch 
nmap <silent> <C-N> :silent noh<CR>

" ctrlP config
let g:ctrlp_map = "<c-p>"
let g:ctrlp_working_path_mode = 'c'

" Open NERDTree
map <leader>& :NERDTreeToggle<CR>

" Open Gundo
map <leader>" :GundoToggle<CR>

" Tabularize shortcuts
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>

" Open Tagbar
map <leader>é :TagbarToggle<CR>

" Spell correction
map <leader>à "<Esc>:silent setlocal spell! spelllang=fr<CR>"

" Easymotion config

map <Leader> <Plug>(easymotion-prefix)
" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap s <Plug>(easymotion-s)
" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
" Keep cursor column when JK motion
let g:EasyMotion_startofline = 0 

" Vim session config/shortcuts
nnoremap <leader>so :OpenSession 
nnoremap <leader>ss :SaveSession 
nnoremap <leader>sd :DeleteSession<Cr>
nnoremap <leader>sc :CloseSession<Cr>
let g:session_autoload = "no"
let g:session_autosave = "no"

" Turn on or off Pencil plugin
map <leader>ç :TogglePencil<CR>

" jk is escape
inoremap jk <esc>

" Paste mode
"set pastetoggle=<F1>

" Ultisnips : trigger configuration
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colored column
highlight ColorColumn ctermbg=blue
set colorcolumn=101

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
         \ if line("'\"") > 0 && line("'\"") <= line("$") |
         \   exe "normal! g`\"" |
         \ endif
" Remember info about open buffers on close
set viminfo^=%

" Disable automatic comment insertion
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Enable expansion with delimitMate
let g:delimitMate_expand_cr = 1
